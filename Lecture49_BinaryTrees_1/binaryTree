
#ifndef _GLIBCXX_BINARYTREE
#define _GLIBCXX_BINARYTREE

#include "iostream"
#include "stack"
#include "queue"
using namespace std;

class treeNode{
public:
    int val;
    treeNode* left;
    treeNode* right;
    treeNode() = default;
    treeNode(int val){
        this->val = val;
        this->left = nullptr;
        this->right = nullptr;
    }
};

class binaryTree {
public:
    treeNode *root = nullptr;
    binaryTree() = default;
    binaryTree(vector<int>& v){
        root = initializeBinaryTree(v);
    }
    treeNode* initializeBinaryTree(vector<int>& v) {
        queue<treeNode*> q;
        treeNode* node = new treeNode(v[0]);
        q.push(node);
        int i=1, j=2;
        while (!q.empty() && i < v.size()){
            treeNode* temp = q.front();
            q.pop();
            treeNode* l;
            treeNode *r;
            if (v[i] != INT_MIN) l  = new treeNode(v[i]);
            else  l  = nullptr;
            if (v[j] != INT_MIN && j != v.size()) r = new treeNode(v[j]);
            else r = nullptr;
            temp->left  = l;
            temp->right = r;
            if (l) q.push(l);
            if (r) q.push(r);
            i+=2;
            j+=2;
        }
        return node;
    }
    int size(treeNode* node){
        if (node == nullptr) return 0;
        return 1 + size(node->left) + size(node->right);
    }
    int noOfLevels(treeNode* node){
        if (node == nullptr) return 0;
        return 1 + max(noOfLevels(node->left), noOfLevels(node->right));
    }

    // Display Functions :-
    void levelOrderTraversal(bool reverse = false) {
        queue<treeNode *> q;
        q.push(root);
        while (!q.empty()) {
            treeNode *temp = q.front();
            cout << temp->val << "  ";
            q.pop();
            if (temp->left && !reverse) q.push(temp->left);
            if (temp->right) q.push(temp->right);
            if (temp->left && reverse) q.push(temp->left);
        }
    }
    void displayLevel(treeNode *node, int n, int curLevel = 1, bool reverse = false) {
        if (!node){
            cout<<"n ";
            return;
        }
        if (curLevel == n) {
            cout << node->val << " ";
            return;
        }
        if (!reverse) return displayLevel(node->left, n, ++curLevel), displayLevel(node->right, n, curLevel);
        return displayLevel(node->right, n, ++curLevel, true), displayLevel(node->left, n, curLevel, true);
    }
    void displayTree(bool reverse = false) {
        int n = noOfLevels(root);
        for (int i = 1; i < n + 1; i++) {
            displayLevel(root, i, 1, reverse);
            cout << "\n";
        }
    }

};
void displayPreOrder(treeNode* node, bool reverse = false) {
    if (!node) return;
    cout<<node->val<<"  ";
    if (!reverse) displayPreOrder(node->left, reverse);
    displayPreOrder(node->right, reverse);
    if (reverse)  displayPreOrder(node->left, reverse);
}
void displayInOrder(treeNode* node, bool reverse = false) {
    if (!node) return;
    if (!reverse) displayInOrder(node->left, reverse);
    else displayInOrder(node->right, reverse);
    cout<<node->val<<"  ";
    if (!reverse) displayInOrder(node->right, reverse);
    else displayInOrder(node->left, reverse);
}
void displayPostOrder(treeNode* node, bool reverse = false) {
    if (!node) return;
    if(!reverse) displayPostOrder(node->left, reverse);
    displayPostOrder(node->right, reverse);
    if (reverse) displayPostOrder(node->left, reverse);
    cout<<node->val<<"  ";
}

#endif /* _GLIBCXX_BINARYTREE */